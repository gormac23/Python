'''
Problem 12
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
'''

def triangular_number(n):
    return(n ** 2 + n)//2


def list_factors(x):
    # We will store all factors in factors
    factors = []
    i = 1
    while i*i <= x:
        # Check if i divides x without leaving a remainder
        if x % i == 0:
            factors.append(i)
            # If it does, find the matching factor, i.e. how mnay times it divideds
            if x//i != i:
                factors.append(x//i)
        i += 1
    # Return the list of factors of x
    return factors


def main():
    # Started at a high range
    for x in range(1000,40000,1):
        num = triangular_number(x)
        if len(list_factors(num)) > 500:
            print(f"{num} has over five hundred divisors!")
            # Exit loop when number is found
            break


if __name__ == '__main__':
    main()